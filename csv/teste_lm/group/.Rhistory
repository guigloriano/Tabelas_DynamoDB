View(aux)
aux
# df para acumular os datasets lidos em um unico arquivo
df <- rbind(df, dataReg)
df
i = 2
# leitura do dataset com o nome na i-nesima posicao da pasta
dataReg <- readr::read_csv(names[i], col_types = cols(hora_minuto = col_character()))
# aux para pegar o dia do dataset
aux[i] <- dataReg$dia_mes_ano[1]
# df para acumular os datasets lidos em um unico arquivo
df <- rbind(df, dataReg)
df
# comando para transformar NaN's e Na's em 0
df.fillna(0)
# comando para transformar NaN's e Na's em 0
df[is.nan(df)] <- 0
# comando para transformar NaN's e Na's em 0
df[is.na(df)] <- 0
df
modelo <- df$P_AC ~ df$irr_est + df$temp + df$numPM1 + df$massaPM1 + df$numPM2 + df$massaPM2
reg_linear <- lm(modelo, data = df)
reg_linear
modelo
summary(reg_linear)
View(df)
i = 3
# teste = assign(names[i],read.csv(names[i],skip=0, header=TRUE))
# leitura do dataset com o nome na i-nesima posicao da pasta
dataReg <- readr::read_csv(names[i], col_types = cols(hora_minuto = col_character()))
# aux para pegar o dia do dataset
aux[i] <- dataReg$dia_mes_ano[1]
# df para acumular os datasets lidos em um unico arquivo
df <- rbind(df, dataReg)
# View(df)
#------------------------------------------------------------------------------------
# comando para transformar NaN's e Na's em 0
df[is.na(df)] <- 0
modelo <- df$P_AC ~ df$irr_est + df$temp + df$numPM1 + df$massaPM1 + df$numPM2 + df$massaPM2
reg_linear <- lm(modelo, data = df)
summary(reg_linear)
i = 4
# teste = assign(names[i],read.csv(names[i],skip=0, header=TRUE))
# leitura do dataset com o nome na i-nesima posicao da pasta
dataReg <- readr::read_csv(names[i], col_types = cols(hora_minuto = col_character()))
# aux para pegar o dia do dataset
aux[i] <- dataReg$dia_mes_ano[1]
# df para acumular os datasets lidos em um unico arquivo
df <- rbind(df, dataReg)
# View(df)
#------------------------------------------------------------------------------------
# comando para transformar NaN's e Na's em 0
df[is.na(df)] <- 0
# comando para remover os NaN's e Na's dos datasets
# dataReg <- na.omit(dataReg)
#------------------------------------------------------------------------------------
modelo <- df$P_AC ~ df$irr_est + df$temp + df$numPM1 + df$massaPM1 + df$numPM2 + df$massaPM2
reg_linear <- lm(modelo, data = df)
summary(reg_linear)
z <- cor.test(df$temp, df$irr_inv)
z
z <- cor(df$temp, f$irr_inv)
z <- cor(df$temp, df$irr_inv)
z
summary(reg_linear)
coefficients(reg_linear)
residuals(reg_linear)
summary(reg_linear)
residuals(reg_linear)
stat.coef  <- summary(reg_linear)$coefficients
coef    <- stat.coef[,1]    # 1st column: coefficients (same as above)
se.coef <- stat.coef[,2]    # 2nd column: se for each coef
t.coef  <- stat.coef[,3]    # 3rd column: t-value for each coef
p.coef  <- stat.coef[,4]    # 4th column: p-value for each coefficient
coef
se.coef
summary(reg_linear)
coef
se.coef
t.coef
p.coef
ypredicted <- predict(reg_linear)
residuals <- y - ypredicted
residuals <- reg_linear - ypredicted
residuals <- df$P_AC - ypredicted
residuals
summary(reg_linear)
mean(residuals(reg_linear))
min(residuals(reg_linear))
max(residuals(reg_linear))
summary(reg_linear)
median(residuals(reg_linear))
quantile(residuals(reg_linear), 0.25)
quantile(residuals(reg_linear), 0.75)
quantile(residuals(reg_linear), 0, 0.25, 0.5, 0.75, 1)
quantile(residuals(reg_linear), probbs= c(0, 0.25, 0.5, 0.75, 1))
summary(reg_linear)
coef
coef$V1
coef    <- stat.coef[1,1]    # 1st column: coefficients (same as above)
coef
Anal_Reg_Linear <- Anal_Reg_Linear$aux[i]
Anal_Reg_Linear <- NULL
Anal_Reg_Linear <- Anal_Reg_Linear$aux[i]
Anal_Reg_Linear
Anal_Reg_Linear <- cbind(aux[i])
Anal_Reg_Linear
Anal_Reg_Linear <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),
c("dia_mes_ano", "Res_Min"))
Anal_Reg_Linear
Anal_Reg_Linear <- cbind(aux[i], min(residuals(reg_linear)))
Anal_Reg_Linear
Anal_Reg_Linear <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),
c("dia_mes_ano", "Res_Min"))
Anal_Reg_Linear <- rbind(aux[i], min(residuals(reg_linear)))
Anal_Reg_Linear
Anal_Reg_Linear <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),
c("dia_mes_ano", "Res_Min"))
Anal_Reg_Linear <- cbind.data.frame(aux[i], min(residuals(reg_linear)))
Anal_Reg_Linear
View(Anal_Reg_Linear)
Anal_Reg_Linear <- NULL
Anal_Reg_Linear <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),
c("dia_mes_ano", "Res_Min"))
Anal_Reg_Linear <- cbind.data.frame(aux[i], min(residuals(reg_linear)))
Anal_Reg_Linear
Anal_Reg_Linear <- NULL
Anal_Reg_Linear <- rbind(cbind(aux[i], min(residuals(reg_linear))))
Anal_Reg_Linear
Anal_Reg_Linear <- NULL
Anal_Reg_Linear <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),
c("dia_mes_ano", "Res_Min"))
Anal_Reg_Linear <- lappy(cbind(aux[i], min(residuals(reg_linear))))
Anal_Reg_Linear <- rbind(cbind(aux[i], min(residuals(reg_linear))))
Anal_Reg_Linear
Anal_Reg_Linear <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),
c("dia_mes_ano", "Res_Min"))
Anal_Reg_Linear
Anal_Reg_Linear <- rbind((aux[i], min(residuals(reg_linear))))
Anal_Reg_Linear <- (rbind(aux[i], min(residuals(reg_linear))))
Anal_Reg_Linear
Anal_Reg_Linear <- NULL
Anal_Reg_Linear <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),
c("dia_mes_ano", "Res_Min"))
linhaDataset <- (cbind(aux[i], min(residuals(reg_linear))))
Anal_Reg_Linear <- rbind(Anal_Reg_Linear, linhaDataset)
Anal_Reg_Linear <- rbind(Anal_Reg_Linear, linhaDataset)
Anal_Reg_Linear <- rbind(Anal_Reg_Linear, linhaDataset)
linhaDataset <- data.frame(aux[i], min(residuals(reg_linear)))
linhaDataset
Anal_Reg_Linear <- rbind(Anal_Reg_Linear, linhaDataset)
Anal_Reg_Linear <- NULL
linhaDataset <- NULL
Anal_Reg_Linear <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),
c("dia_mes_ano", "Res_Min"))
linhaDataset <- data.frame(aux[i], min(residuals(reg_linear)))
Anal_Reg_Linear <- rbind(Anal_Reg_Linear, linhaDataset)
Anal_Reg_Linear <- NULL
linhaDataset <- NULL
Anal_Reg_Linear <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),
c("dia_mes_ano", "Res_Min"))
linhaDataset <- data.frame(aux[i], min(residuals(reg_linear)))
Anal_Reg_Linear
linhaDataset
linhaDataset <- (aux[i], min(residuals(reg_linear)))
Anal_Reg_Linear <- cbind(aux[i], min(residuals(reg_linear)))
Anal_Reg_Linear <- cbind(aux[i], min(residuals(reg_linear)))
Anal_Reg_Linear
Anal_Reg_Linear <- NULL
Anal_Reg_Linear <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),
c("dia_mes_ano", "Res_Min"))
Anal_Reg_Linear <- NULL
nome_Colunas <- NULL
nome_Colunas <- c("dia_mes_ano", "Res_Min")
Anal_Reg_Linear <- c(aux[i], min(residuals(reg_linear)))
dataset <- data.frame(nome_Colunas, Anal_Reg_Linear)
dataset
Anal_Reg_Linear <- NULL
nome_Colunas <- NULL
nome_Colunas <- c("dia_mes_ano", "Res_Min")
Anal_Reg_Linear <- c(aux[i], min(residuals(reg_linear)))
dataset <- data.frame(nome_Colunas, Anal_Reg_Linear)
dataset
Anal_Reg_Linear <- NULL
nome_Colunas <- NULL
RegLin_atual <- NULL
RegLin_acc <- NULL
RegLin_atual <- NULL
RegLin_acc <- NULL
RegLin_atual <- cbind(aux[i], min(residuals(reg_linear)))
RegLin_acc <- rbind(RegLin_acc, RegLin_atual)
i = 5
# leitura do dataset com o nome na i-nesima posicao da pasta
dataReg <- readr::read_csv(names[i], col_types = cols(hora_minuto = col_character()))
# aux para pegar o dia do dataset
aux[i] <- dataReg$dia_mes_ano[1]
# df para acumular os datasets lidos em um unico arquivo
df <- rbind(df, dataReg)
#------------------------------------------------------------------------------------
# comando para transformar NaN's e Na's em 0
df[is.na(df)] <- 0
# definicao do modelo e calculo da regressao linear usando suas variaveis
modelo <- df$P_AC ~ df$irr_est + df$temp + df$numPM1 + df$massaPM1 + df$numPM2 + df$massaPM2
reg_linear <- lm(modelo, data = df)
summary(reg_linear)
# Calcula os residuais (min, 1Q, MEDIAN, 3Q, max) de uma vez
quantile(residuals(reg_linear), probs= c(0, 0.25, 0.5, 0.75, 1))
# Separa os coeficientes por termos (Estimado, Std. Error, t value, p-value)
stat.coef  <- summary(reg_linear)$coefficients
coef    <- stat.coef[,1]    # 1st column: coefficients (same as above)
se.coef <- stat.coef[,2]    # 2nd column: se for each coef
t.coef  <- stat.coef[,3]    # 3rd column: t-value for each coef
p.coef  <- stat.coef[,4]    # 4th column: p-value for each coefficient
RegLin_atual <- NULL
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
RegLin_acc
RegLin_atual
RegLin_acc <- rbind(RegLin_atual)
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
RegLin_acc
RegLin_atual.data.frame <- NULL
RegLin_acc.data.frame <- NULL
RegLin_atual.data.frame <- NULL
RegLin_acc.data.frame <- NULL
RegLin_atual <- RegLin_atual$aux[i]
teste <- data.frame(dia, RegMin)
teste <- data.frame('dia', 'RegMin')
View(teste)
teste <- setNames(data.frame('dia', 'RegMin'))
teste <- setNames(data.frame("dia", "RegMin"))
teste <- setNames(data.frame(matrix(ncol = 2, nrow = 1)), c("dia", "RegMin"))
teste
RLAtual <- data.frame(c(aux[i], min(residuals(reg_linear))))
RLAtual
RLFinal < rbind(teste, RLAtual)
RLFinal.data.frame()
RLFinal <- NULL
RLFinal < rbind(teste, RLAtual)
source('D:/github/Tabelas_DynamoDB/RProject/scripts/caminhos.R')
group_caminho <- "D:/github/Tabelas_DynamoDB/csv/teste_lm/group/"
pathGroup <- group_caminho
pathRegLin <- setwd(pathGroup )
pathRegLin <- setwd(pathGroup)
nameRegLin <- list.files(pattern = "*.csv")
filesRegLin <- paste(pathRegLin,  "/", nameRegLin, sep = "")
# leitura dos arquivos pra regressaoLinear
csvPath <- setwd(pathGroup)
names <- list.files(pattern = "*.csv")
library(dplyr)
library(readr)
library(stringr)
library(pracma)
i = 1
# leitura do dataset com o nome na i-nesima posicao da pasta
dataReg <- readr::read_csv(names[i], col_types = cols(hora_minuto = col_character()))
# aux para pegar o dia do dataset
aux[i] <- dataReg$dia_mes_ano[1]
aux <- NULL
# aux para pegar o dia do dataset
aux[i] <- dataReg$dia_mes_ano[1]
# df para acumular os datasets lidos em um unico arquivo
df <- rbind(df, dataReg)
df <- NULL
# df para acumular os datasets lidos em um unico arquivo
df <- rbind(df, dataReg)
i = 2
# leitura do dataset com o nome na i-nesima posicao da pasta
dataReg <- readr::read_csv(names[i], col_types = cols(hora_minuto = col_character()))
# aux para pegar o dia do dataset
aux[i] <- dataReg$dia_mes_ano[1]
# df para acumular os datasets lidos em um unico arquivo
df <- rbind(df, dataReg)
i = 3
# leitura do dataset com o nome na i-nesima posicao da pasta
dataReg <- readr::read_csv(names[i], col_types = cols(hora_minuto = col_character()))
# aux para pegar o dia do dataset
aux[i] <- dataReg$dia_mes_ano[1]
# df para acumular os datasets lidos em um unico arquivo
df <- rbind(df, dataReg)
dataReg
df
dataReg
df
teste <- data.frame ("A" = NULL, "B" = NULL)
teste
teste$A = aux[i]
teste <- data.frame ()
teste$A = aux[i]
teste$A <- aux[i]
teste <- read.csv(text="fruit,cost,quantity")
teste
teste <- read.csv(text="Dia,RegLin_Min,RegLin_Max")
teste
teste$Dia <- aux[i]
teste$RegLin_Min <- min(residuals(reg_linear))
teste$Dia <- rbind(aux[i])
teste$Dia <- cbind(aux[i])
lilas <- lapply(cbind(aux[i], min(residuals(reg_linear)) , max(residuals(reg_linear))  ))
lilas.data.frame <- lapply(cbind(aux[i], min(residuals(reg_linear)) , max(residuals(reg_linear))  ))
df2 <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("name", "age", "gender")
colnames(df) <- x
df2
df2 <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("name", "age", "gender")
colnames(df2) <- x
df2
df2$name <- cbind(aux[i])
df2$name <-(aux[i])
AgoraVai <- data.frame (Dia, RegLin_Min, RegLin_Max)
Dia <- NULL
RegLin_Min <- NULL
RegLin_Max <- NULL
AgoraVai <- data.frame (Dia, RegLin_Min, RegLin_Max)
AgoraVai
AgoraVai <- data.frame(Dia, RegLin_Min, RegLin_Max)
AgoraVai
View(AgoraVai)
AgoraVai <- setNames(data.frame(matrix(ncol = 3, nrow = 1)), c("Dia", "RegLin_Min", "RegLin_Max"))
AgoraVai
Japan.Population <- data.frame(11, 04554, 126860301)
Japan.Population
Testando <- rbind(AgoraVai,Japan.Population )
Japan.Population <- data.frame(Dia = c(11), RegLin_Min = c(04554), RegLin_Max = c( 126860301))
Japan.Population
Testando <- rbind(AgoraVai,Japan.Population)
Testando
AgoraVai <- data.frame(Dia = c(11), RegLin_Min = c(04554), RegLin_Max = c( 126860301))
AgoraVai
AgoraVai <- data.frame(Dia = c(aux[i]), RegLin_Min = c(04554), RegLin_Max = c( 126860301))
AgoraVai
AgoraVai <- data.frame(Dia = c(aux[i]),
RegLin_Min = c(min(residuals(reg_linear))),
RegLin_Max = c( max(residuals(reg_linear)))
)
AgoraVai <- data.frame(Dia = c(aux[i]),
RegLin_Min = c(min(residuals(reg_linear))),
RegLin_Max = c(max(residuals(reg_linear)))
)
AgoraVai <- data.frame(Dia = c(aux[i]),
RegLin_Min = c(min(residuals(reg_linear))),
RegLin_Max = c(max(residuals(reg_linear)))
)
# definicao do modelo e calculo da regressao linear usando suas variaveis
modelo <- df$P_AC ~ df$irr_est + df$temp + df$numPM1 + df$massaPM1 + df$numPM2 + df$massaPM2
reg_linear <- lm(modelo, data = df)
i = 1
# leitura do dataset com o nome na i-nesima posicao da pasta
dataReg <- readr::read_csv(names[i], col_types = cols(hora_minuto = col_character()))
# aux para pegar o dia do dataset
aux[i] <- dataReg$dia_mes_ano[1]
# df para acumular os datasets lidos em um unico arquivo
df <- rbind(df, dataReg)
# View(df)
#------------------------------------------------------------------------------------
# comando para transformar NaN's e Na's em 0
df[is.na(df)] <- 0
# comando para remover os NaN's e Na's dos datasets
# dataReg <- na.omit(dataReg)
#------------------------------------------------------------------------------------
# definicao do modelo e calculo da regressao linear usando suas variaveis
modelo <- df$P_AC ~ df$irr_est + df$temp + df$numPM1 + df$massaPM1 + df$numPM2 + df$massaPM2
reg_linear <- lm(modelo, data = df)
summary(reg_linear)
i = 1
# leitura do dataset com o nome na i-nesima posicao da pasta
dataReg <- readr::read_csv(names[i], col_types = cols(hora_minuto = col_character()))
# aux para pegar o dia do dataset
aux[i] <- dataReg$dia_mes_ano[1]
# df para acumular os datasets lidos em um unico arquivo
df <- rbind(df, dataReg)
# View(df)
#------------------------------------------------------------------------------------
# comando para transformar NaN's e Na's em 0
df[is.na(df)] <- 0
# comando para remover os NaN's e Na's dos datasets
# dataReg <- na.omit(dataReg)
#------------------------------------------------------------------------------------
# definicao do modelo e calculo da regressao linear usando suas variaveis
modelo <- df$P_AC ~ df$irr_est + df$temp + df$numPM1 + df$massaPM1 + df$numPM2 + df$massaPM2
reg_linear <- lm(modelo, data = df)
summary(reg_linear)
i = 1
# leitura do dataset com o nome na i-nesima posicao da pasta
dataReg <- readr::read_csv(names[i], col_types = cols(hora_minuto = col_character()))
# aux para pegar o dia do dataset
aux[i] <- dataReg$dia_mes_ano[1]
# df para acumular os datasets lidos em um unico arquivo
df <- rbind(df, dataReg)
df <- NULL
# df para acumular os datasets lidos em um unico arquivo
df <- rbind(df, dataReg)
#------------------------------------------------------------------------------------
# comando para transformar NaN's e Na's em 0
df[is.na(df)] <- 0
# definicao do modelo e calculo da regressao linear usando suas variaveis
modelo <- df$P_AC ~ df$irr_est + df$temp + df$numPM1 + df$massaPM1 + df$numPM2 + df$massaPM2
reg_linear <- lm(modelo, data = df)
summary(reg_linear)
ResMin <- min(residuals(reg_linear))
ResMax <- max(residuals(reg_linear))
AgoraVai <- data.frame(Dia = c(aux[i]), RegLin_Min = c(ResMin), RegLin_Max = c(ResMax)   )
AgoraVai
AgoraVaiFim <- data.frame()
AgoraVaiFim <- rbind(AgoraVai, AgoraVaiFim)
AgoraVaiFim
i = 2
# leitura do dataset com o nome na i-nesima posicao da pasta
dataReg <- readr::read_csv(names[i], col_types = cols(hora_minuto = col_character()))
# aux para pegar o dia do dataset
aux[i] <- dataReg$dia_mes_ano[1]
# df para acumular os datasets lidos em um unico arquivo
df <- rbind(df, dataReg)
#------------------------------------------------------------------------------------
# comando para transformar NaN's e Na's em 0
df[is.na(df)] <- 0
# definicao do modelo e calculo da regressao linear usando suas variaveis
modelo <- df$P_AC ~ df$irr_est + df$temp + df$numPM1 + df$massaPM1 + df$numPM2 + df$massaPM2
reg_linear <- lm(modelo, data = df)
# Calcula os residuais (min, 1Q, MEDIAN, 3Q, max) de uma vez
quantile(residuals(reg_linear), probs= c(0, 0.25, 0.5, 0.75, 1))
# Separa os coeficientes por termos (Estimado, Std. Error, t value, p-value)
stat.coef  <- summary(reg_linear)$coefficients
coef    <- stat.coef[,1]    # 1st column: coefficients (same as above)
se.coef <- stat.coef[,2]    # 2nd column: se for each coef
t.coef  <- stat.coef[,3]    # 3rd column: t-value for each coef
p.coef  <- stat.coef[,4]    # 4th column: p-value for each coefficient
AgoraVai <- data.frame(Dia = c(aux[i]), RegLin_Min = c(ResMin), RegLin_Max = c(ResMax)   )
AgoraVaiFim <- rbind(AgoraVai, AgoraVaiFim)
AgoraVaiFim
summary(reg_linear)
AgoraVaiFim
ResMin
# Calcula os residuais individuaalmente
ResMin <- min(residuals(reg_linear))                # minimo
# quantile(residuals(reg_linear), 0.25)     # 1o. Quantil
# median(residuals(reg_linear))             # mediana
# quantile(residuals(reg_linear), 0.75)     # 3o. Quantil
ResMax <- max(residuals(reg_linear))                # maximo
# Separa os coeficientes por termos (Estimado, Std. Error, t value, p-value)
stat.coef  <- summary(reg_linear)$coefficients
coef    <- stat.coef[,1]    # 1st column: coefficients (same as above)
se.coef <- stat.coef[,2]    # 2nd column: se for each coef
t.coef  <- stat.coef[,3]    # 3rd column: t-value for each coef
p.coef  <- stat.coef[,4]    # 4th column: p-value for each coefficient
AgoraVai <- data.frame(Dia = c(aux[i]), RegLin_Min = c(ResMin), RegLin_Max = c(ResMax)   )
AgoraVaiFim <- rbind(AgoraVai, AgoraVaiFim)
AgoraVaiFim
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
AgoraVaiFim
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
RL_final
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
RL_final
stat.coef
coef
summary(reg_linear)
Coef_Est_Intercept <- stat.coef[1,1]
Coef_Est_Intercept
coef
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
RL_final
se.coef
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
View(RL_final)
summary(reg_linear)
summary(reg_linear)$r.squared
summary(reg_linear)$$adj.r.squared
summary(reg_linear)$adj.r.squared
summary(reg_linear)$df
p.coef  <- stat.coef[,4]    # 4th column: p-value for each coefficient
summary(reg_linear)$df[2]
summary(reg_linear)$sigma
lmp(reg_linear)
t.coef
p.coef
pVal <- anova(reg_linear)$'Pr(>F)'[1]
pVal
summary(reg_linear)
p.coef
CoefPValue_Intercept <- stat.coef[1,4]
CoefPValue_irr_est <- stat.coef[2,4]
CoefPValue_temp <- stat.coef[3,4]
CoefPValue_numPM1 <- stat.coef[4,4]
CoefPValue_massaPM1 <- stat.coef[5,4]
CoefPValue_numPM2 <- stat.coef[6,4]
CoefPValue_massaPM2 <- stat.coef[7,4]
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
RL_final
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
View(RL_final)
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
RL_final
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
View(RL_final)
length(names)
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
RL_final
View(RL_final)
# elementos do rodapé do summary(reg_linear)
if (FALSE){
summary(reg_linear)$r.squared           # Multiple R-squared
summary(reg_linear)$adj.r.squared       # Adjusted R-squared:
summary(reg_linear)$df[2]               # degrees of freedom
summary(reg_linear)$sigma               # Residual standard error:
}
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
