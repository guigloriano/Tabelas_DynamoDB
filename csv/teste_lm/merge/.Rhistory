pathrepo <- "/home/SPB_Data/TestesKym/MonitoramentoUFMS"
regex.inversor.path <- regex("InversorFronius")
regex.inversor.file <- regex(".*RelatÃ³rio_diÃ¡rio_.*.csv")
columns.inversor <- c("timestamp","I_CA", "I_CC", "V_CA", "V_CC", "E_CA")
regex.estacao.path <- regex("WeatherHawk$")
columns.estacao <- c("timestamp","dir_vento", "vel_vento", "raj_vento", "umidade", "temp_in", "temp", "raw_barom", "chuva_tot", "rad_sol", "p_orvalho", "barom_sl", "rad_sol_avg", "vel_vento_max", "raj_vento_max", "umidade_max", "temp_in_max", "temp_max", "raw_barom_max", "chuva_tot_max", "rad_sol_max", "barom_sl_max", "vel_vento_min", "raj_vento_min", "umidade_min", "temp_in_min", "temp_min", "raw_barom_min", "chuva_tot_min", "rad_sol_min", "barom_sl_min", "moon_phase", "data")
columns.estacao.tonumeric <- c("dir_vento", "vel_vento", "raj_vento", "umidade", "temp_in", "temp", "raw_barom", "chuva_tot", "rad_sol", "p_orvalho", "barom_sl", "rad_sol_avg", "vel_vento_max", "raj_vento_max", "umidade_max", "temp_in_max", "temp_max", "raw_barom_max", "chuva_tot_max", "rad_sol_max", "barom_sl_max", "vel_vento_min", "raj_vento_min", "umidade_min", "temp_in_min", "temp_min", "raw_barom_min", "chuva_tot_min", "rad_sol_min", "barom_sl_min", "moon_phase")
filter_data <- strptime("10/11/2018", format = "%d/%m/%Y")
f1 <- function(x){
if(!is.na(str_extract(x, regex.inversor.path))){
files <- list.files(x, full.names = TRUE, include.dirs = TRUE, recursive = TRUE, pattern = regex.inversor.file)
d <- do.call("rbind", lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE, header = FALSE, skip = 2, na.strings = "n/a")))
return(d)
}
return()
}
f2 <- function(x){
if(!is.na(str_extract(x, regex.estacao.path))){
files <- list.files(x, full.names = TRUE, include.dirs = TRUE, recursive = TRUE, pattern = regex(".csv$"))
files <- files[str_sub(files, -10, -5) >= strftime(filter_data, "%y%m%d")]
d <- do.call("rbind", lapply(files, f3))
return(d)
}
return()
}
f3 <- function(x){
d <- read.csv(x, stringsAsFactors = FALSE, header = FALSE, skip = 3, na.strings = "n/a")
d$data = str_sub(x, -10, -5)
return(d)
}
source('~/TestesKym/analise_dados/ufv-ufms2/codigos/f1.R')
require(ggplot2)
require(lmtest)
library("stringr")
arqEst <- "~/Projeto/Tabelas_DynamoDB/RProject/DadosEst/ambientais_ufms_OK.csv"
arqEst <- "../ambientais_ufms_OK.csv"
arqEst
arqEst <- "~/Projeto/Tabelas_DynamoDB/RProject/DadosEst/ambientais_ufms_OK.csv"
arqEst <- "~/Projeto/Tabelas_DynamoDB/RProject/DadosEst/ambientais_ufms_OK.csv"
arqEst <- "DadosEst/ambientais_ufms_OK.csv"
arqInvFronius <- "~/Projeto/monitoramento-ufms"
arqEst <- "DadosEst/ambientais_ufms_OK.csv"
arqEst <- read.csv("/DadosEst/ambientais_ufms_OK.csv")
arqEst <- read.csv("~/Projeto/Tabelas_DynamoDB/RProject/DadosEst/ambientais_ufms_OK.csv")
arqEst <- read.csv("/Projeto/Tabelas_DynamoDB/RProject/DadosEst/ambientais_ufms_OK.csv")
arqEst <- read.csv("DadosEst/ambientais_ufms_OK.csv")
arqEst <- "~/Projeto/Tabelas_DynamoDB/RProject/DadosEst/ambientais_ufms_OK.csv"
load("C:/Users/LSCAD/Documents/Projeto/Tabelas_DynamoDB/RProject/DadosEst/ambientais_ufms_OK.csv")
ambientais_ufms_OK <- read.csv("C:/Users/LSCAD/Documents/Projeto/Tabelas_DynamoDB/RProject/DadosEst/ambientais_ufms_OK.csv", header=FALSE)
View(ambientais_ufms_OK)
arqEst <- read.csv("C:/Users/LSCAD/Documents/Projeto/Tabelas_DynamoDB/RProject/DadosEst/ambientais_ufms_OK.csv",
header=FALSE)
arqEst2 <- read.csv('/DadosEst/ambientais_ufms_OK.csv')
arqEst2 <- read.csv(file = '/DadosEst/ambientais_ufms_OK.csv')
arqEst2 <- read.csv(file = 'DadosEst/ambientais_ufms_OK.csv')
library(dplyr)
library(readr)
library(stringr)
library(pracma)
library(compareDF)
source('D:/github/Tabelas_DynamoDB/RProject/scripts/z_quebrarDataset.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/z_quebrarDataset.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/z_quebrarDataset.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/z_quebrarDataset.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/z_testeSerieTemporal.R')
testeDiv <- "D:\\github\\Tabelas_DynamoDB\\csv\\teste_lm\\merge\\"
# bloco para leitura dos arquivos .csvs do inversor
pathDiv <- setwd(testeDiv)
pathDiv <- setwd(testeDiv)
namesDiv <- list.files(pattern = "*.csv")
filesDiv <- paste(pathDiv,  "/", namesDiv, sep = "")
dataset_aux <- setNames(data.frame(matrix(ncol = 9, nrow = 1)),
c("dia", "hora", "Vd1", "Pd", "Nloss",
"Vd2", "m", "x_gauss", "SR" ))
dataset_save <- NULL
datasetDiv <- NULL
ListaVento <- NULL
ListaVentoMedia <- NULL
ListaMassa <- NULL
ListaMassaMedia <- NULL
ListaConcentracao <- NULL
ListaConcentracaoMedia <- NULL
aux_dia <- NULL
hora_final <- NULL
UAux <- NULL
RaAux <- NULL
RbAux <- NULL
VsAux <- NULL
VdAux <- NULL
j = 1
k = 30
source('D:/github/Tabelas_DynamoDB/RProject/scripts/z_quebrarDataset.R')
testeDiv <- "D:\\github\\Tabelas_DynamoDB\\csv\\teste_lm\\merge\\"
# bloco para leitura dos arquivos .csvs do inversor
pathDiv <- setwd(testeDiv)
pathDiv <- setwd(testeDiv)
namesDiv <- list.files(pattern = "*.csv")
filesDiv <- paste(pathDiv,  "/", namesDiv, sep = "")
dataset_aux <- setNames(data.frame(matrix(ncol = 9, nrow = 1)),
c("dia", "hora", "Vd1", "Pd", "Nloss",
"Vd2", "m", "x_gauss", "SR" ))
dataset_save <- NULL
datasetDiv <- NULL
ListaVento <- NULL
ListaVentoMedia <- NULL
ListaMassa <- NULL
ListaMassaMedia <- NULL
ListaConcentracao <- NULL
ListaConcentracaoMedia <- NULL
aux_dia <- NULL
hora_final <- NULL
UAux <- NULL
RaAux <- NULL
RbAux <- NULL
VsAux <- NULL
VdAux <- NULL
j = 1
k = 30
i = 1
dataset_temp<- readr::read_csv(namesDiv[i], col_types = cols(hora_minuto = col_character()))
if (dataset_temp$hora_minuto[1] <= "010000"){
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "010000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "010000"){
hora_final <- "080000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "010000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
source('D:/github/Tabelas_DynamoDB/RProject/scripts/z_quebrarDataset.R')
View(dataset_save)
source('D:/github/Tabelas_DynamoDB/RProject/scripts/z_quebrarDataset.R')
namesDiv[10]
namesDiv[15]
i = 15
dataset_temp<- readr::read_csv(namesDiv[i], col_types = cols(hora_minuto = col_character()))
dataset_temp
if (dataset_temp$hora_minuto[1] <= "010000"){
hora_final <- "010000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "010000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
dataset_teste
dataset_teste <- na.omit(dataset_teste)
dataset_teste
dataset_teste
aux_dia[i] <- datasetDiv$dia_mes_ano[1]
aux_dia
datasetDiv$dia_mes_ano[1]
# Temperatura media em °C
Temp_Media = round(mean(dataset_teste$temp, na.rm = TRUE), digits = 5)
Temp_Media
# calcula a vel. do vento media atual e monta uma lista delas
Vel_Med_Vento = round(mean(dataset_teste$vento_vel, na.rm = TRUE), digits = 5)
Vel_Med_Vento
ListaVento <- c(ListaVento, Vel_Med_Vento)
# calcula a media das velocidades medias e monta uma lista
Media_Vel_Med_Vento = mean(ListaVento)
ListaVentoMedia <- c(ListaVentoMedia, Media_Vel_Med_Vento)
ListaVento
Media_Vel_Med_Vento
ListaVentoMedia
ConcentracaoParticulados
dataset_teste$numPM1
dataset_teste$numPM2
ConcentracaoParticulados
mean(dataset_teste$numPM1)
mean(dataset_teste$numPM2
mean(dataset_teste$numPM2)
mean(dataset_teste$numPM1)
mean(dataset_teste$numPM2)
mean(dataset_teste$numPM1) + mean(dataset_teste$numPM2)
ConcentracaoParticulados = round(mean(dataset_teste$numPM1) + mean(dataset_teste$numPM2), digits = 8)
ConcentracaoParticulados
ListaVentoMedia <- c(ListaVentoMedia, Media_Vel_Med_Vento)
ConcentracaoParticulados = round(mean(dataset_teste$numPM1) + mean(dataset_teste$numPM2), digits = 8)
ListaConcentracao <- c(ListaConcentracao, ConcentracaoParticulados)
ListaConcentracao
ConcentracaoMediaParticulados <- mean(ListaConcentracao)
ListaConcentracaoMedia <- c(ListaConcentracaoMedia, ConcentracaoMediaParticulados)
ListaConcentracaoMedia
if (dataset_temp$hora_minuto[1] <= "020000"){
hora_final <- "020000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "020000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
source('D:/github/Tabelas_DynamoDB/RProject/scripts/z_quebrarDataset.R')
View(dataset_save)
testeDiv <- "D:\\github\\Tabelas_DynamoDB\\csv\\teste_lm\\merge\\"
# bloco para leitura dos arquivos .csvs do inversor
pathDiv <- setwd(testeDiv)
pathDiv <- setwd(testeDiv)
namesDiv <- list.files(pattern = "*.csv")
filesDiv <- paste(pathDiv,  "/", namesDiv, sep = "")
dataset_aux <- setNames(data.frame(matrix(ncol = 9, nrow = 1)),
c("dia", "hora", "Vd1", "Pd", "Nloss",
"Vd2", "m", "x_gauss", "SR" ))
dataset_save <- NULL
datasetDiv <- NULL
ListaVento <- NULL
ListaVentoMedia <- NULL
ListaMassa <- NULL
ListaMassaMedia <- NULL
ListaConcentracao <- NULL
ListaConcentracaoMedia <- NULL
aux_dia <- NULL
hora_final <- NULL
UAux <- NULL
RaAux <- NULL
RbAux <- NULL
VsAux <- NULL
VdAux <- NULL
j = 1
j = 1
k = 30
dataset_temp<- readr::read_csv(namesDiv[i], col_types = cols(hora_minuto = col_character()))
if (dataset_temp$hora_minuto[1] <= "010000"){
hora_final <- "010000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "010000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
i = 1
dataset_temp<- readr::read_csv(namesDiv[i], col_types = cols(hora_minuto = col_character()))
i = 15
dataset_temp<- readr::read_csv(namesDiv[i], col_types = cols(hora_minuto = col_character()))
if (dataset_temp$hora_minuto[1] <= "010000"){
hora_final <- "010000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "010000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
dataset_teste
dataset_teste
dataset_teste <- datasetDiv
dataset_teste <- na.omit(dataset_teste)
aux_dia[i] <- datasetDiv$dia_mes_ano[1]
dataset_teste
View(dataset_teste)
aux_dia
# Temperatura media em °C
Temp_Media = round(mean(dataset_teste$temp, na.rm = TRUE), digits = 5)
dataset_teste$temp
Temp_Media
# calcula a vel. do vento media atual e monta uma lista delas
Vel_Med_Vento = round(mean(dataset_teste$vento_vel, na.rm = TRUE), digits = 5)
ListaVento <- c(ListaVento, Vel_Med_Vento)
Vel_Med_Vento
ListaVento
# calcula a media das velocidades medias e monta uma lista
Media_Vel_Med_Vento = mean(ListaVento)
ListaVentoMedia <- c(ListaVentoMedia, Media_Vel_Med_Vento)
Media_Vel_Med_Vento
ListaVentoMedia
ConcentracaoParticulados = round(mean(dataset_teste$numPM1) + mean(dataset_teste$numPM2), digits = 8)
ListaConcentracao <- c(ListaConcentracao, ConcentracaoParticulados)
ConcentracaoMediaParticulados <- mean(ListaConcentracao)
ListaConcentracaoMedia <- c(ListaConcentracaoMedia, ConcentracaoMediaParticulados)
ConcentracaoParticulados
ListaConcentracao
ListaConcentracao
ConcentracaoParticulados
ConcentracaoMediaParticulados
ListaConcentracao
ConcentracaoMediaParticulados
ConcentracaoMediaParticulados = mean(ListaConcentracao)
ConcentracaoMediaParticulados
ListaConcentracao
ConcentracaoParticulados
ListaConcentracao
ListaConcentracao <- NULL
ListaConcentracao
ConcentracaoParticulados
ConcentracaoParticulados = round(mean(dataset_teste$numPM1) + mean(dataset_teste$numPM2), digits = 8)
ListaConcentracao <- c(ListaConcentracao, ConcentracaoParticulados)
ListaConcentracao
ConcentracaoMediaParticulados
ConcentracaoMediaParticulados = mean(ListaConcentracao)
ConcentracaoMediaParticulados
ListaConcentracaoMedia
ListaConcentracaoMedia <- c(ListaConcentracaoMedia, ConcentracaoMediaParticulados)
ListaConcentracaoMedia
ListaConcentracaoMedia <- NULL
ListaConcentracaoMedia <- c(ListaConcentracaoMedia, ConcentracaoMediaParticulados)
ListaConcentracaoMedia
# calcula a media da massa dos particulados e monta uma lista
Massa_Particulados = round(mean(dataset_teste$massaPM1) + mean(dataset_teste$massaPM2), digits = 8)
ListaMassa <- c(ListaMassa, Massa_Particulados)
Massa_Particulados
ListaMassa
# calcula a media da massa media dos particulados e monta uma lista
Media_Massa_Particulados <- mean(ListaMassa)
ListaMassaMedia <- c(ListaMassaMedia, Media_Massa_Particulados)
ListaMassaMedia
ListaVento
ListaVentoMedia
testeDiv <- "D:\\github\\Tabelas_DynamoDB\\csv\\teste_lm\\merge\\"
# bloco para leitura dos arquivos .csvs do inversor
pathDiv <- setwd(testeDiv)
pathDiv <- setwd(testeDiv)
namesDiv <- list.files(pattern = "*.csv")
filesDiv <- paste(pathDiv,  "/", namesDiv, sep = "")
dataset_aux <- setNames(data.frame(matrix(ncol = 9, nrow = 1)),
c("dia", "hora", "Vd1", "Pd", "Nloss",
"Vd2", "m", "x_gauss", "SR" ))
dataset_save <- NULL
datasetDiv <- NULL
ListaVento <- NULL
ListaVentoMedia <- NULL
ListaMassa <- NULL
ListaMassaMedia <- NULL
ListaConcentracao <- NULL
ListaConcentracaoMedia <- NULL
aux_dia <- NULL
hora_final <- NULL
UAux <- NULL
RaAux <- NULL
RbAux <- NULL
VsAux <- NULL
VdAux <- NULL
j = 1
k = 30
ListaVento
ListaVentoMedia
ListaMassa
ListaMassaMedia
ListaConcentracao
ListaConcentracaoMedia
aux_dia
hora_final
i = 15
dataset_temp <- na.omit(dataset_temp)#aux_dia[i] <- datasetDiv$dia_mes_ano[1]
dataset_temp<- readr::read_csv(namesDiv[i], col_types = cols(hora_minuto = col_character()))
dataset_temp <- na.omit(dataset_temp)#aux_dia[i] <- datasetDiv$dia_mes_ano[1]
dataset_temp
j = 1
if (dataset_temp$hora_minuto[1] <= "010000"){
hora_final <- "010000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "010000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
dataset_aux
dataset_teste
datasetDiv
if (dataset_temp$hora_minuto[1] <= "010000"){
hora_final <- "010000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "010000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
dataset_teste
ListaConcentracaoMedia
ListaMassa
testeDiv <- "D:\\github\\Tabelas_DynamoDB\\csv\\teste_lm\\merge\\"
# bloco para leitura dos arquivos .csvs do inversor
pathDiv <- setwd(testeDiv)
pathDiv <- setwd(testeDiv)
namesDiv <- list.files(pattern = "*.csv")
filesDiv <- paste(pathDiv,  "/", namesDiv, sep = "")
dataset_aux <- setNames(data.frame(matrix(ncol = 9, nrow = 1)),
c("dia", "hora", "Vd1", "Pd", "Nloss",
"Vd2", "m", "x_gauss", "SR" ))
dataset_save <- NULL
datasetDiv <- NULL
ListaVento <- NULL
ListaVentoMedia <- NULL
ListaMassa <- NULL
ListaMassaMedia <- NULL
ListaConcentracao <- NULL
ListaConcentracaoMedia <- NULL
aux_dia <- NULL
hora_final <- NULL
UAux <- NULL
RaAux <- NULL
RbAux <- NULL
VsAux <- NULL
VdAux <- NULL
j = 1
k = 30
i = 15
dataset_temp<- readr::read_csv(namesDiv[i], col_types = cols(hora_minuto = col_character()))
dataset_temp <- na.omit(dataset_temp)#aux_dia[i] <- datasetDiv$dia_mes_ano[1]
hora_final <- "010000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "010000")
datasetDiv
View(datasetDiv)
dataset_teste <- datasetDiv
aux_dia[i] <- datasetDiv$dia_mes_ano[1]
aux_dia
# Temperatura media em °C
Temp_Media = round(mean(dataset_teste$temp, na.rm = TRUE), digits = 5)
# calcula a vel. do vento media atual e monta uma lista delas
Vel_Med_Vento = round(mean(dataset_teste$vento_vel, na.rm = TRUE), digits = 5)
ListaVento <- c(ListaVento, Vel_Med_Vento)
Temp_Media
Vel_Med_Vento
ListaVento
# calcula a media das velocidades medias e monta uma lista
Media_Vel_Med_Vento = mean(ListaVento)
ListaVentoMedia <- c(ListaVentoMedia, Media_Vel_Med_Vento)
ConcentracaoParticulados = round(mean(dataset_teste$numPM1) + mean(dataset_teste$numPM2), digits = 8)
ListaConcentracao <- c(ListaConcentracao, ConcentracaoParticulados)
Media_Vel_Med_Vento
ListaVentoMedia
ConcentracaoParticulados = round(mean(dataset_teste$numPM1) + mean(dataset_teste$numPM2), digits = 8)
ListaConcentracao <- c(ListaConcentracao, ConcentracaoParticulados)
ConcentracaoParticulados = round(mean(dataset_teste$numPM1) + mean(dataset_teste$numPM2), digits = 8)
ListaConcentracao <- c(ListaConcentracao, ConcentracaoParticulados)
ListaConcentracao <- NULL
ListaConcentracaoMedia <- NULL
ConcentracaoParticulados = round(mean(dataset_teste$numPM1) + mean(dataset_teste$numPM2), digits = 8)
ListaConcentracao <- c(ListaConcentracao, ConcentracaoParticulados)
ConcentracaoParticulados
ListaConcentracao
ConcentracaoMediaParticulados = mean(ListaConcentracao)
ListaConcentracaoMedia <- c(ListaConcentracaoMedia, ConcentracaoMediaParticulados)
ConcentracaoMediaParticulados
ListaConcentracaoMedia
# calcula a media da massa dos particulados e monta uma lista
Massa_Particulados = round(mean(dataset_teste$massaPM1) + mean(dataset_teste$massaPM2), digits = 8)
ListaMassa <- c(ListaMassa, Massa_Particulados)
# calcula a media da massa media dos particulados e monta uma lista
Media_Massa_Particulados <- mean(ListaMassa)
ListaMassaMedia <- c(ListaMassaMedia, Media_Massa_Particulados)
# Ra = resistencia aerodinamica
# Cds = coeficiente de arrasto da superfície [ 1.2 * 10^(-2) ]
# U = velocidade media do vento (m/s)
Cds = 1.2*10^(-2) # 0.012
U_velMed_ar = ListaVentoMedia[i] / 3.6
UAux <- c(UAux, U_velMed_ar)
Ra = 1/(Cds * U_velMed_ar)
RaAux <- c(RaAux, Ra)
# U_estrela = velocidade de atrito
# constante de Von Karman [ VonKarman = 0.41 ]
# h = altura de referencia [m ?]
# z0 = 1, dimensao de rugosidade para o caso de terrenos urbanos
VonKarman = 0.41
h_ref = 2.5
z0 = 1
U_estrela = VonKarman * U_velMed_ar/ (log(h_ref/z0)) # U_estrela = ((0.41*U) / 0.9162907)
# D = coeficiente de difusa browniano [ m²/s ]
# k = constante de Boltzmann [ 1.38 * 10^(-23) J/k ]
# T_Ar = temperatura do ar [ em Kelvin, K = °C + 273,15 ]
# u = viscosidade do ar [ 1.81 * 10^(-5) kg/ms ]
# Dp = diametro da particula [ m , PM2.5 = 2.5*10^-(6)]
k_boltzman = 1.38*10^(-23)
T_Ar = Temp_Media + 273.15
u_viscAr = 1.81*10^(-5)
Dp_diamPart = 2.5*10^(-6)
D_coefDif = k_boltzman*T_Ar/(3 * pi * u_viscAr * Dp_diamPart) # D = ((1.38e-23 * T_Ar)/ 4.264712e-10)
# Sc = numero de Schmidt
# v = viscosidade cinematica do ar [ 1.48 * 10^(-5) m²/s ]
v_viscCinAr = 1.48*10^(-5)
Sc_numSchmidt = v_viscCinAr/D_coefDif
# Vs = velocidade de sedmentacao
# Pp = densidade da particula aerosol [ 1000 kg/m³ ]
# g = aceleracao gravitacional [ 9,81 m/s² ]
# u = viscosidade do ar [ 1.81 * 10^(-5) kg/ms ]
# Cc = fator de correcao de Cunninghann [ ~ 1 ]
Pp_densPart = 1000
g_acelGrav = 9.81
Cc_fatCorr = 1
Vs_velSed = ( (Dp_diamPart^2 * Pp_densPart * g_acelGrav)/(18 * u_viscAr) ) * Cc_fatCorr
# St = numero de Strokes
St_numStrokes = ( U_estrela^2 * Vs_velSed)/(g_acelGrav * v_viscCinAr)
# Rb = resistencia da camada quasi-laminar
Rb = 1/(3 * U_estrela * (Sc_numSchmidt^(-0.5) + (St_numStrokes/(1+St_numStrokes))^(2) ) )
RbAux <- c(RbAux, Rb)
# theta = inclinacao dos modulos [ em ° ]
theta = 15
### Modelo 01 - On temporal modelling (...) in seven cities
# Vd = velocidade de deposicao
Vd1 = 1/(Ra+Rb) + Vs_velSed*cosd(theta)
Pd = round( Vd1 * ListaConcentracaoMedia[i] * 10^(-6) * i , 8) #MediaConcentracao
Nloss = 0.015 * Pd
### Modelo 02 - Simple Model for Predicting (...) of PV Panels
# t unidade de tempo em segundos
t_sec = 86400*i
Vd2 =  1/(Ra+Rb) + Vs_velSed
VdAux <- c(VdAux, Vd2)
m = Vd2 * ListaMassaMedia[i] * 10^(-6) * cosd(theta) * t_sec # MediaMassa
x_gauss = 0.17*m^(0.8473)
SR = 1 - 34.37*erf(x_gauss)
# criacao do dataset para calculo do impacto da sujidade
dataset_aux <- rbind(dataset_aux, list(dataset_teste$dia_mes_ano[1], hora_final,
Vd1, Pd, Nloss, Vd2, m, x_gauss, SR), deparse.level = 1)
dataset_aux
Vd1
Ra
Rb
Vs_velSed
Rb
U_estrela
U_estrela
VonKarman
U_velMed_ar
U_velMed_ar
ListaVentoMedia
FDP <- ListaVentoMedia[i]
U_velMed_ar = FDP / 3.6
U_velMed_ar
ListaVentoMedia[i]
ListaVentoMedia[i]
ListaVentoMedia
source('D:/github/Tabelas_DynamoDB/RProject/scripts/z_testeSerieTemporal.R')
dataset_aux
ListaConcentracaoMedia
ListaConcentracaoMedia[i]
i
U_velMed_ar = ListaVentoMedia[length(ListaVentoMedia)] / 3.6
U_velMed_ar
source('D:/github/Tabelas_DynamoDB/RProject/scripts/z_quebrarDataset.R')
dataset_aux
View(dataset_save)
ListaConcentracaoMedia
