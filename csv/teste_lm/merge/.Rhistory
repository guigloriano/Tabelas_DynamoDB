"Dia" = View(temp_i)
temp_i = 1
"Dia" = View(temp_i)
"Dia" = temp_i
temp_i
dia_quebra <- temp_i
hora_quebra <- 1
hora_quebra <- hora_quebra + 1
library(dplyr)
library(readr)
library(stringr)
library(pracma)
library(compareDF)
source('D:/github/Tabelas_DynamoDB/RProject/scripts/z_quebrarDataset.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/z_testeSerieTemporal.R')
testeDiv <- "D:\\github\\Tabelas_DynamoDB\\csv\\teste_lm\\merge\\"
# bloco para leitura dos arquivos .csvs do inversor
pathDiv <- setwd(testeDiv)
pathDiv <- setwd(testeDiv)
namesDiv <- list.files(pattern = "*.csv")
filesDiv <- paste(pathDiv,  "/", namesDiv, sep = "")
dataset_aux <- setNames(data.frame(matrix(ncol = 9, nrow = 1)),
c("dia_mes_ano", "hora_minuto", "Vd1", "Pd", "Nloss",
"Vd2", "m", "x_gauss", "SR" ))
dataset_save <- NULL
datasetDiv <- NULL
ListaVento <- NULL
ListaVentoMedia <- NULL
ListaMassa <- NULL
ListaMassaMedia <- NULL
ListaConcentracao <- NULL
ListaConcentracaoMedia <- NULL
aux_dia <- NULL
hora_inicial <- NULL
z_merge_total <- NULL
UAux <- NULL
RaAux <- NULL
RbAux <- NULL
VsAux <- NULL
VdAux <- NULL
temp_i = 1
temp_j = 1
temp_k = length(filesDiv)
dia_quebra <- NULL
hora_quebra <- 1
# namesDiv[15]
# for (i in 1:length(namesDiv)){
for (temp_i in temp_j:temp_k){
dia_quebra <- temp_i
dataset_temp <- readr::read_csv(namesDiv[temp_i], col_types = cols(hora_minuto = col_character()))
if (dataset_temp$hora_minuto[1] <= "010000"){
hora_inicial <- "000000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "010000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "020000"){
hora_inicial <- "010000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "020000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "030000"){
hora_inicial <- "020000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "030000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "040000"){
hora_inicial <- "030000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "040000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "050000"){
hora_inicial <- "040000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "050000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "060000"){
hora_inicial <- "050000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "060000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "070000"){
hora_inicial <- "060000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "070000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "080000"){
hora_inicial <- "070000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "080000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "090000"){
hora_inicial <- "080000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "090000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "100000"){
hora_inicial <- "090000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "100000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "110000"){
hora_inicial <- "100000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "110000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "120000"){
hora_inicial <- "110000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "120000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "130000"){
hora_inicial <- "120000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "130000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "140000"){
hora_inicial <- "130000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "140000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "150000"){
hora_inicial <- "140000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "150000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "160000"){
hora_inicial <- "150000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "160000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "170000"){
hora_inicial <- "160000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "170000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "180000"){
hora_inicial <- "170000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "180000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "190000"){
hora_inicial <- "180000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "190000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "200000"){
hora_inicial <- "190000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "200000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "210000"){
hora_inicial <- "200000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "210000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "220000"){
hora_inicial <- "210000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "220000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "230000"){
hora_inicial <- "220000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "230000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "235900"){
hora_inicial <- "230000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "235959")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
}
source('D:/github/Tabelas_DynamoDB/RProject/scripts/z_quebrarDataset.R')
hora_quebra
dia_quebra
source('D:/github/Tabelas_DynamoDB/RProject/scripts/z_quebrarDataset.R')
temp_i
source('D:/github/Tabelas_DynamoDB/RProject/scripts/z_quebrarDataset.R')
dataset_teste <- datasetDiv
dataset_teste <- na.omit(dataset_teste)#aux_dia[i] <- datasetDiv$dia_mes_ano[1]
aux_dia[temp_i] <- datasetDiv$dia_mes_ano[1]
# Temperatura media em °C
Temp_Media <- mean(dataset_teste$temp, na.rm=TRUE)
# calcula a vel. do vento media atual e monta uma lista delas
Vel_Med_Vento <- mean(dataset_teste$vento_vel, na.rm=TRUE)
ListaVento <- c(ListaVento, Vel_Med_Vento)
# calcula a media das velocidades medias e monta uma lista
Media_Vel_Med_Vento <- mean(ListaVento, na.rm=TRUE)
ListaVentoMedia <- c(ListaVentoMedia, Media_Vel_Med_Vento)
#ConcentracaoParticulados <- mean(dataset_teste$numPM1, na.rm=TRUE) + mean(dataset_teste$numPM2, na.rm=TRUE)
ConcentracaoParticulados <- mean(dataset_teste$numPM1, na.rm=TRUE) + mean(dataset_teste$numPM2, na.rm=TRUE)
ListaConcentracao <- c(ListaConcentracao, ConcentracaoParticulados)
ConcentracaoMediaParticulados <- mean(ListaConcentracao, na.rm=TRUE)
ListaConcentracaoMedia <- c(ListaConcentracaoMedia, ConcentracaoMediaParticulados)
# calcula a media da massa dos particulados e monta uma lista
Massa_Particulados <- mean(dataset_teste$massaPM1, na.rm=TRUE) + mean(dataset_teste$massaPM2, na.rm=TRUE)
ListaMassa <- c(ListaMassa, Massa_Particulados)
# calcula a media da massa media dos particulados e monta uma lista
Media_Massa_Particulados <- mean(ListaMassa, na.rm=TRUE)
ListaMassaMedia <- c(ListaMassaMedia, Media_Massa_Particulados)
# Ra = resistencia aerodinamica
# Cds = coeficiente de arrasto da superfície [ 1.2 * 10^(-2) ]
# U = velocidade media do vento (m/s)
Cds = 1.2*10^(-2) # 0.012
U_velMed_ar = ListaVentoMedia[length(ListaVentoMedia)] / 3.6
UAux <- c(UAux, U_velMed_ar)
Ra = 1/(Cds * U_velMed_ar)
RaAux <- c(RaAux, Ra)
# U_estrela = velocidade de atrito
# constante de Von Karman [ VonKarman = 0.41 ]
# h = altura de referencia [m ?]
# z0 = 1, dimensao de rugosidade para o caso de terrenos urbanos
VonKarman = 0.41
h_ref = 2.5
z0 = 1
U_estrela = VonKarman * U_velMed_ar/ (log(h_ref/z0)) # U_estrela = ((0.41*U) / 0.9162907)
# D = coeficiente de difusa browniano [ m²/s ]
# k = constante de Boltzmann [ 1.38 * 10^(-23) J/k ]
# T_Ar = temperatura do ar [ em Kelvin, K = °C + 273,15 ]
# u = viscosidade do ar [ 1.81 * 10^(-5) kg/ms ]
# Dp = diametro da particula [ m , PM2.5 = 2.5*10^-(6)]
k_boltzman = 1.38*10^(-23)
T_Ar = Temp_Media + 273.15
u_viscAr = 1.81*10^(-5)
Dp_diamPart = 2.5*10^(-6)
D_coefDif = k_boltzman*T_Ar/(3 * pi * u_viscAr * Dp_diamPart) # D = ((1.38e-23 * T_Ar)/ 4.264712e-10)
# Sc = numero de Schmidt
# v = viscosidade cinematica do ar [ 1.48 * 10^(-5) m²/s ]
v_viscCinAr = 1.48*10^(-5)
Sc_numSchmidt = v_viscCinAr/D_coefDif
# Vs = velocidade de sedmentacao
# Pp = densidade da particula aerosol [ 1000 kg/m³ ]
# g = aceleracao gravitacional [ 9,81 m/s² ]
# u = viscosidade do ar [ 1.81 * 10^(-5) kg/ms ]
# Cc = fator de correcao de Cunninghann [ ~ 1 ]
Pp_densPart = 1000
g_acelGrav = 9.81
Cc_fatCorr = 1
Vs_velSed = ( (Dp_diamPart^2 * Pp_densPart * g_acelGrav)/(18 * u_viscAr) ) * Cc_fatCorr
# St = numero de Strokes
St_numStrokes = ( U_estrela^2 * Vs_velSed)/(g_acelGrav * v_viscCinAr)
# Rb = resistencia da camada quasi-laminar
Rb = 1/(3 * U_estrela * (Sc_numSchmidt^(-0.5) + (St_numStrokes/(1+St_numStrokes))^(2) ) )
RbAux <- c(RbAux, Rb)
# theta = inclinacao dos modulos [ em ° ]
theta = 15
### Modelo 01 - On temporal modelling (...) in seven cities
# Vd = velocidade de deposicao
Vd1 = 1/(Ra+Rb) + Vs_velSed*cosd(theta)
Pd = round( Vd1 * ListaConcentracaoMedia[length(ListaConcentracaoMedia)] * 10^(-6) * dia_quebra , 8) #MediaConcentracao
Nloss = 0.015 * Pd
### Modelo 02 - Simple Model for Predicting (...) of PV Panels
# t unidade de tempo em segundos
t_sec = 86400 * dia_quebra
Vd2 =  1/(Ra+Rb) + Vs_velSed
VdAux <- c(VdAux, Vd2)
m = Vd2 * ListaMassaMedia[length(ListaMassaMedia)] * 10^(-6) * cosd(theta) * t_sec # MediaMassa
x_gauss = 0.17*m^(0.8473)
SR = 1 - 34.37*erf(x_gauss)
# criacao do dataset para calculo do impacto da sujidade
dataset_aux <- rbind(dataset_aux, list(dataset_teste$dia_mes_ano[1], hora_inicial,
Vd1, Pd, Nloss, Vd2, m, x_gauss, SR), deparse.level = 1)
dataset_aux <- unique(dataset_aux)
hora_quebra <- hora_quebra + 1
#}
source('D:/github/Tabelas_DynamoDB/RProject/scripts/z_quebrarDataset.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/z_quebrarDataset.R')
testeDiv <- "D:\\github\\Tabelas_DynamoDB\\csv\\teste_lm\\merge\\"
# bloco para leitura dos arquivos .csvs do inversor
pathDiv <- setwd(testeDiv)
pathDiv <- setwd(testeDiv)
namesDiv <- list.files(pattern = "*.csv")
filesDiv <- paste(pathDiv,  "/", namesDiv, sep = "")
dataset_aux <- setNames(data.frame(matrix(ncol = 9, nrow = 1)),
c("dia_mes_ano", "hora_minuto", "Vd1", "Pd", "Nloss",
"Vd2", "m", "x_gauss", "SR" ))
dataset_save <- NULL
datasetDiv <- NULL
ListaVento <- NULL
ListaVentoMedia <- NULL
ListaMassa <- NULL
ListaMassaMedia <- NULL
ListaConcentracao <- NULL
ListaConcentracaoMedia <- NULL
aux_dia <- NULL
hora_inicial <- NULL
z_merge_total <- NULL
UAux <- NULL
RaAux <- NULL
RbAux <- NULL
VsAux <- NULL
VdAux <- NULL
temp_i = 1
temp_j = 1
temp_k = length(filesDiv)
dia_quebra <- NULL
hora_quebra <- 1
dia_quebra <- temp_i
dataset_temp <- readr::read_csv(namesDiv[temp_i], col_types = cols(hora_minuto = col_character()))
if (dataset_temp$hora_minuto[1] <= "010000"){
hora_inicial <- "000000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "010000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "020000"){
hora_inicial <- "010000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "020000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
if (dataset_temp$hora_minuto[1] <= "030000"){
hora_inicial <- "020000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "030000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
dataset_temp <- readr::read_csv(namesDiv[temp_i], col_types = cols(hora_minuto = col_character()))
if (dataset_temp$hora_minuto[1] <= "010000"){
hora_inicial <- "000000"
datasetDiv <- filter(dataset_temp, dataset_temp$hora_minuto <= "010000")
source("D:\\github\\Tabelas_DynamoDB\\RProject\\scripts\\z_testeSerieTemporal.R")
}
