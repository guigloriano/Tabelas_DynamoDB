files <- list.files(x, full.names = TRUE, include.dirs = TRUE, recursive = TRUE, pattern = regex(".csv$"))
files <- files[str_sub(files, -10, -5) >= strftime(filter_data, "%y%m%d")]
d <- do.call("rbind", lapply(files, f3))
return(d)
}
return()
}
f3 <- function(x){
d <- read.csv(x, stringsAsFactors = FALSE, header = FALSE, skip = 3, na.strings = "n/a")
d$data = str_sub(x, -10, -5)
return(d)
}
View(filter_data)
View(filter_data)
#pathrepo <- "/home/kymberlim/Documentos/ProjetoSolar/repositorio/monitoramento-ufms"
pathrepo <- "/home/Users/LSCAD/Desktop/TestesKym"
regex.inversor.path <- regex("InversorFronius")
regex.inversor.file <- regex(".*RelatÃ³rio_diÃ¡rio_.*.csv")
columns.inversor <- c("timestamp","I_CA", "I_CC", "V_CA", "V_CC", "E_CA")
regex.estacao.path <- regex("WeatherHawk$")
columns.estacao <- c("timestamp","dir_vento", "vel_vento", "raj_vento", "umidade", "temp_in", "temp", "raw_barom", "chuva_tot", "rad_sol", "p_orvalho", "barom_sl", "rad_sol_avg", "vel_vento_max", "raj_vento_max", "umidade_max", "temp_in_max", "temp_max", "raw_barom_max", "chuva_tot_max", "rad_sol_max", "barom_sl_max", "vel_vento_min", "raj_vento_min", "umidade_min", "temp_in_min", "temp_min", "raw_barom_min", "chuva_tot_min", "rad_sol_min", "barom_sl_min", "moon_phase", "data")
columns.estacao.tonumeric <- c("dir_vento", "vel_vento", "raj_vento", "umidade", "temp_in", "temp", "raw_barom", "chuva_tot", "rad_sol", "p_orvalho", "barom_sl", "rad_sol_avg", "vel_vento_max", "raj_vento_max", "umidade_max", "temp_in_max", "temp_max", "raw_barom_max", "chuva_tot_max", "rad_sol_max", "barom_sl_max", "vel_vento_min", "raj_vento_min", "umidade_min", "temp_in_min", "temp_min", "raw_barom_min", "chuva_tot_min", "rad_sol_min", "barom_sl_min", "moon_phase")
filter_data <- strptime("10/11/2018", format = "%d/%m/%Y")
f1 <- function(x){
if(!is.na(str_extract(x, regex.inversor.path))){
files <- list.files(x, full.names = TRUE, include.dirs = TRUE, recursive = TRUE, pattern = regex.inversor.file)
d <- do.call("rbind", lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE, header = FALSE, skip = 2, na.strings = "n/a")))
return(d)
}
return()
}
f2 <- function(x){
if(!is.na(str_extract(x, regex.estacao.path))){
files <- list.files(x, full.names = TRUE, include.dirs = TRUE, recursive = TRUE, pattern = regex(".csv$"))
files <- files[str_sub(files, -10, -5) >= strftime(filter_data, "%y%m%d")]
d <- do.call("rbind", lapply(files, f3))
return(d)
}
return()
}
f3 <- function(x){
d <- read.csv(x, stringsAsFactors = FALSE, header = FALSE, skip = 3, na.strings = "n/a")
d$data = str_sub(x, -10, -5)
return(d)
}
View(f1)
View(f1)
#pathrepo <- "/home/kymberlim/Documentos/ProjetoSolar/repositorio/monitoramento-ufms"
pathrepo <- "/home/Users/LSCAD/Desktop/TestesKym/MonitoramentoUFMS"
regex.inversor.path <- regex("InversorFronius")
regex.inversor.file <- regex(".*RelatÃ³rio_diÃ¡rio_.*.csv")
columns.inversor <- c("timestamp","I_CA", "I_CC", "V_CA", "V_CC", "E_CA")
regex.estacao.path <- regex("WeatherHawk$")
columns.estacao <- c("timestamp","dir_vento", "vel_vento", "raj_vento", "umidade", "temp_in", "temp", "raw_barom", "chuva_tot", "rad_sol", "p_orvalho", "barom_sl", "rad_sol_avg", "vel_vento_max", "raj_vento_max", "umidade_max", "temp_in_max", "temp_max", "raw_barom_max", "chuva_tot_max", "rad_sol_max", "barom_sl_max", "vel_vento_min", "raj_vento_min", "umidade_min", "temp_in_min", "temp_min", "raw_barom_min", "chuva_tot_min", "rad_sol_min", "barom_sl_min", "moon_phase", "data")
columns.estacao.tonumeric <- c("dir_vento", "vel_vento", "raj_vento", "umidade", "temp_in", "temp", "raw_barom", "chuva_tot", "rad_sol", "p_orvalho", "barom_sl", "rad_sol_avg", "vel_vento_max", "raj_vento_max", "umidade_max", "temp_in_max", "temp_max", "raw_barom_max", "chuva_tot_max", "rad_sol_max", "barom_sl_max", "vel_vento_min", "raj_vento_min", "umidade_min", "temp_in_min", "temp_min", "raw_barom_min", "chuva_tot_min", "rad_sol_min", "barom_sl_min", "moon_phase")
filter_data <- strptime("10/11/2018", format = "%d/%m/%Y")
f1 <- function(x){
if(!is.na(str_extract(x, regex.inversor.path))){
files <- list.files(x, full.names = TRUE, include.dirs = TRUE, recursive = TRUE, pattern = regex.inversor.file)
d <- do.call("rbind", lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE, header = FALSE, skip = 2, na.strings = "n/a")))
return(d)
}
return()
}
f2 <- function(x){
if(!is.na(str_extract(x, regex.estacao.path))){
files <- list.files(x, full.names = TRUE, include.dirs = TRUE, recursive = TRUE, pattern = regex(".csv$"))
files <- files[str_sub(files, -10, -5) >= strftime(filter_data, "%y%m%d")]
d <- do.call("rbind", lapply(files, f3))
return(d)
}
return()
}
f3 <- function(x){
d <- read.csv(x, stringsAsFactors = FALSE, header = FALSE, skip = 3, na.strings = "n/a")
d$data = str_sub(x, -10, -5)
return(d)
}
#pathrepo <- "/home/kymberlim/Documentos/ProjetoSolar/repositorio/monitoramento-ufms"
#C:\SPB_Data\TestesKym\MonitoramentoUFMS
pathrepo <- "/home/SPB_Data/TestesKym/MonitoramentoUFMS"
regex.inversor.path <- regex("InversorFronius")
regex.inversor.file <- regex(".*RelatÃ³rio_diÃ¡rio_.*.csv")
columns.inversor <- c("timestamp","I_CA", "I_CC", "V_CA", "V_CC", "E_CA")
regex.estacao.path <- regex("WeatherHawk$")
columns.estacao <- c("timestamp","dir_vento", "vel_vento", "raj_vento", "umidade", "temp_in", "temp", "raw_barom", "chuva_tot", "rad_sol", "p_orvalho", "barom_sl", "rad_sol_avg", "vel_vento_max", "raj_vento_max", "umidade_max", "temp_in_max", "temp_max", "raw_barom_max", "chuva_tot_max", "rad_sol_max", "barom_sl_max", "vel_vento_min", "raj_vento_min", "umidade_min", "temp_in_min", "temp_min", "raw_barom_min", "chuva_tot_min", "rad_sol_min", "barom_sl_min", "moon_phase", "data")
columns.estacao.tonumeric <- c("dir_vento", "vel_vento", "raj_vento", "umidade", "temp_in", "temp", "raw_barom", "chuva_tot", "rad_sol", "p_orvalho", "barom_sl", "rad_sol_avg", "vel_vento_max", "raj_vento_max", "umidade_max", "temp_in_max", "temp_max", "raw_barom_max", "chuva_tot_max", "rad_sol_max", "barom_sl_max", "vel_vento_min", "raj_vento_min", "umidade_min", "temp_in_min", "temp_min", "raw_barom_min", "chuva_tot_min", "rad_sol_min", "barom_sl_min", "moon_phase")
filter_data <- strptime("10/11/2018", format = "%d/%m/%Y")
f1 <- function(x){
if(!is.na(str_extract(x, regex.inversor.path))){
files <- list.files(x, full.names = TRUE, include.dirs = TRUE, recursive = TRUE, pattern = regex.inversor.file)
d <- do.call("rbind", lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE, header = FALSE, skip = 2, na.strings = "n/a")))
return(d)
}
return()
}
f2 <- function(x){
if(!is.na(str_extract(x, regex.estacao.path))){
files <- list.files(x, full.names = TRUE, include.dirs = TRUE, recursive = TRUE, pattern = regex(".csv$"))
files <- files[str_sub(files, -10, -5) >= strftime(filter_data, "%y%m%d")]
d <- do.call("rbind", lapply(files, f3))
return(d)
}
return()
}
f3 <- function(x){
d <- read.csv(x, stringsAsFactors = FALSE, header = FALSE, skip = 3, na.strings = "n/a")
d$data = str_sub(x, -10, -5)
return(d)
}
source('~/TestesKym/analise_dados/ufv-ufms2/codigos/f1.R')
require(ggplot2)
require(lmtest)
library("stringr")
arqEst <- "~/Projeto/Tabelas_DynamoDB/RProject/DadosEst/ambientais_ufms_OK.csv"
arqEst <- "../ambientais_ufms_OK.csv"
arqEst
arqEst <- "~/Projeto/Tabelas_DynamoDB/RProject/DadosEst/ambientais_ufms_OK.csv"
arqEst <- "~/Projeto/Tabelas_DynamoDB/RProject/DadosEst/ambientais_ufms_OK.csv"
arqEst <- "DadosEst/ambientais_ufms_OK.csv"
arqInvFronius <- "~/Projeto/monitoramento-ufms"
arqEst <- "DadosEst/ambientais_ufms_OK.csv"
arqEst <- read.csv("/DadosEst/ambientais_ufms_OK.csv")
arqEst <- read.csv("~/Projeto/Tabelas_DynamoDB/RProject/DadosEst/ambientais_ufms_OK.csv")
arqEst <- read.csv("/Projeto/Tabelas_DynamoDB/RProject/DadosEst/ambientais_ufms_OK.csv")
arqEst <- read.csv("DadosEst/ambientais_ufms_OK.csv")
arqEst <- "~/Projeto/Tabelas_DynamoDB/RProject/DadosEst/ambientais_ufms_OK.csv"
load("C:/Users/LSCAD/Documents/Projeto/Tabelas_DynamoDB/RProject/DadosEst/ambientais_ufms_OK.csv")
ambientais_ufms_OK <- read.csv("C:/Users/LSCAD/Documents/Projeto/Tabelas_DynamoDB/RProject/DadosEst/ambientais_ufms_OK.csv", header=FALSE)
View(ambientais_ufms_OK)
arqEst <- read.csv("C:/Users/LSCAD/Documents/Projeto/Tabelas_DynamoDB/RProject/DadosEst/ambientais_ufms_OK.csv",
header=FALSE)
arqEst2 <- read.csv('/DadosEst/ambientais_ufms_OK.csv')
arqEst2 <- read.csv(file = '/DadosEst/ambientais_ufms_OK.csv')
arqEst2 <- read.csv(file = 'DadosEst/ambientais_ufms_OK.csv')
group_caminho <- "D:/github/Tabelas_DynamoDB/csv/teste_lm/group/"
# agrupamento dos arquivos em registros de 1hr
pathGroup <- group_caminho
pathRegLin <- setwd(pathGroup )
pathRegLin <- setwd(pathGroup)
nameRegLin <- list.files(pattern = "*.csv")
filesRegLin <- paste(pathRegLin,  "/", nameRegLin, sep = "")
# leitura dos arquivos pra regressaoLinear
csvPath <- setwd(pathGroup)
names <- list.files(pattern = "*.csv")
aux_dia <- NULL
df <- NULL
RL_final <- data.frame()
i = 1
# leitura do dataset com o nome na i-nesima posicao da pasta
dataReg <- readr::read_csv(names[i], col_types = cols(hora_minuto = col_character()))
# aux para pegar o dia do dataset
aux_dia[i] <- dataReg$dia_mes_ano[1]
# df para acumular os datasets lidos em um unico arquivo
df <- rbind(df, dataReg)
# View(df)
#------------------------------------------------------------------------------------
# comando para transformar NaN's e Na's em 0
df[is.na(df)] <- 0
# comando para remover os NaN's e Na's dos datasets
# dataReg <- na.omit(dataReg)
#------------------------------------------------------------------------------------
# definicao do modelo e calculo da regressao linear usando suas variaveis
# variaveis disponiveis:
#         P_AC              massaPM1          massaPM4        tamanho_medio
#         irr_est           numPM1            numPM4          vento_vel
#         irr_inv           massaPM2          massaPM10       vento_dir
#         temp              numPM2            numPM10         rainfall
var_resp <- df$P_AC
var_exp <- df$irr_est + df$temp + df$numPM1 + df$massaPM1 + df$numPM2 + df$massaPM2
modelo <- var_resp ~ var_exp
reg_linear <- lm(modelo, data = df)
var_resp
var_resp <- df$P_AC
df$P_AC
# df para acumular os datasets lidos em um unico arquivo
df <- rbind(df, dataReg)
# leitura do dataset com o nome na i-nesima posicao da pasta
dataReg <- readr::read_csv(names[i], col_types = cols(hora_minuto = col_character()))
aux_dia <- NULL
df <- NULL
RL_final <- data.frame()
i = 1
i = 1
# leitura do dataset com o nome na i-nesima posicao da pasta
dataReg <- readr::read_csv(names[i], col_types = cols(hora_minuto = col_character()))
names
# leitura do dataset com o nome na i-nesima posicao da pasta
dataReg <- readr::read_csv(names[i], col_types = cols(hora_minuto = col_character()))
library(dplyr)
library(readr)
library(stringr)
library(pracma)
# leitura do dataset com o nome na i-nesima posicao da pasta
dataReg <- readr::read_csv(names[i], col_types = cols(hora_minuto = col_character()))
# aux para pegar o dia do dataset
aux_dia[i] <- dataReg$dia_mes_ano[1]
# df para acumular os datasets lidos em um unico arquivo
df <- rbind(df, dataReg)
#------------------------------------------------------------------------------------
# comando para transformar NaN's e Na's em 0
df[is.na(df)] <- 0
var_resp <- df$P_AC
var_exp <- df$irr_est + df$temp + df$numPM1 + df$massaPM1 + df$numPM2 + df$massaPM2
modelo <- var_resp ~ var_exp
reg_linear <- lm(modelo, data = df)
summary(reg_linear)
modelo
lm(modelo, data = df)
var_exp
var_resp
aux_dia
df$irr_est + df$temp + df$numPM1 + df$massaPM1 + df$numPM2 + df$massaPM2
df$temp
modelo <- df$P_AC ~ df$irr_est + df$temp + df$numPM1 + df$massaPM1 + df$numPM2 + df$massaPM2
reg_linear <- lm(modelo, data = df)
summary(reg_linear)
CoefEst_rainfall <- stat.coef[10,1]
# Separa os coeficientes por termos (Estimado, Std. Error, t value, p-value)
stat.coef  <- summary(reg_linear)$coefficients
CoefEst_rainfall <- stat.coef[10,1]
coef
modelo <- df$P_AC ~ df$irr_est + df$temp + df$numPM1 + df$massaPM1 + df$numPM2 + df$massaPM2 +
df$vento_vel + df$vento_dir + df$rainfall
reg_linear <- lm(modelo, data = df)
# Separa os coeficientes por termos (Estimado, Std. Error, t value, p-value)
stat.coef  <- summary(reg_linear)$coefficients
stat.coef
CoefEst_rainfall <- stat.coef[10,1]
CoefEst_rainfall
df$rainfall
modelo <- df$P_AC ~ df$irr_est + df$temp + df$numPM1 + df$massaPM1 + df$numPM2 + df$massaPM2 +
df$vento_vel + df$vento_dir + df$rainfall
reg_linear <- lm(modelo, data = df)
reg_linear
CoefEst_rainfall <- stat.coef[10,1]
stat.coef
coef
rainfall
df$rainfall
reg_linear
Res_Min
stat.coef
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
summary(reg_linear)
coef
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
# Calcula os residuais individuaalmente
Res_Min <- min(residuals(reg_linear))                # minimo
Res_1Q <- quantile(residuals(reg_linear), 0.25)     # 1o. Quantil
Res_Mdn <- median(residuals(reg_linear))             # mediana
Res_3Q <- quantile(residuals(reg_linear), 0.75)     # 3o. Quantil
Res_Max <- max(residuals(reg_linear))                # maximo
# Separa os coeficientes por termos (Estimado, Std. Error, t value, p-value)
stat.coef  <- summary(reg_linear)$coefficients
coef    <- stat.coef[,1]    # 1st column: coefficients (same as above)
se.coef <- stat.coef[,2]    # 2nd column: se for each coef
t.coef  <- stat.coef[,3]    # 3rd column: t-value for each coef
p.coef  <- stat.coef[,4]    # 4th column: p-value for each coefficient
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
aux_dia <- NULL
df <- NULL
RL_final <- data.frame()
i = 1
# leitura do dataset com o nome na i-nesima posicao da pasta
dataReg <- readr::read_csv(names[i], col_types = cols(hora_minuto = col_character()))
# aux para pegar o dia do dataset
aux_dia[i] <- dataReg$dia_mes_ano[1]
# df para acumular os datasets lidos em um unico arquivo
df <- rbind(df, dataReg)
#------------------------------------------------------------------------------------
# comando para transformar NaN's e Na's em 0
df[is.na(df)] <- 0
modelo <- df$P_AC ~ df$irr_est + df$temp + df$numPM1 + df$massaPM1 + df$numPM2 + df$massaPM2 +
df$vento_vel + df$vento_dir + df$rainfall
reg_linear <- lm(modelo, data = df)
# Calcula os residuais individuaalmente
Res_Min <- min(residuals(reg_linear))                # minimo
Res_1Q <- quantile(residuals(reg_linear), 0.25)     # 1o. Quantil
Res_Mdn <- median(residuals(reg_linear))             # mediana
Res_3Q <- quantile(residuals(reg_linear), 0.75)     # 3o. Quantil
Res_Max <- max(residuals(reg_linear))                # maximo
# Separa os coeficientes por termos (Estimado, Std. Error, t value, p-value)
stat.coef  <- summary(reg_linear)$coefficients
coef    <- stat.coef[,1]    # 1st column: coefficients (same as above)
se.coef <- stat.coef[,2]    # 2nd column: se for each coef
t.coef  <- stat.coef[,3]    # 3rd column: t-value for each coef
p.coef  <- stat.coef[,4]    # 4th column: p-value for each coefficient
# divide os elementos do coeficiente da Estimativa
CoefEst_Intercept <- stat.coef[1,1]
CoefEst_irr_est <- stat.coef[2,1]
CoefEst_temp <- stat.coef[3,1]
CoefEst_numPM1 <- stat.coef[4,1]
CoefEst_massaPM1 <- stat.coef[5,1]
CoefEst_numPM2 <- stat.coef[6,1]
CoefEst_massaPM2 <- stat.coef[7,1]
CoefEst_vento_vel <- stat.coef[8,1]
CoefEst_vento_dir <- stat.coef[9,1]
# divide os elementos do coeficiente da Erro Padrao (Std. Error)
CoefStdError_Intercept <- stat.coef[1,2]
CoefStdError_irr_est <- stat.coef[2,2]
CoefStdError_temp <- stat.coef[3,2]
CoefStdError_numPM1 <- stat.coef[4,2]
CoefStdError_massaPM1 <- stat.coef[5,2]
CoefStdError_numPM2 <- stat.coef[6,2]
CoefStdError_massaPM2 <- stat.coef[7,2]
# divide os elementos do coeficiente dos p-Values
CoefPValue_Intercept <- stat.coef[1,4]
CoefPValue_irr_est <- stat.coef[2,4]
CoefPValue_temp <- stat.coef[3,4]
CoefPValue_numPM1 <- stat.coef[4,4]
CoefPValue_massaPM1 <- stat.coef[5,4]
CoefPValue_numPM2 <- stat.coef[6,4]
CoefPValue_massaPM2 <- stat.coef[7,4]
if (FALSE){
TEASASJKJ
ASKÇLAJNS
EWEWEWE
ÇmçnpçNAS
}
# elementos do rodapé do summary(reg_linear)
summary(reg_linear)$r.squared           # Multiple R-squared
summary(reg_linear)$adj.r.squared       # Adjusted R-squared:
summary(reg_linear)$df[2]               # degrees of freedom
summary(reg_linear)$sigma               # Residual standard error:
RL_atual <- data.frame(Dia = c(aux_dia[i]),
RL_Res_Min = c(ResMin),
RL_Res_1Q = c(Res_1Q),
RL_Res_Mdn = c(Res_Mdn),
RL_Res_3Q = c(Res_3Q),
RegLin_Max = c(Res_Max),
CoefEst_Intercept = c(CoefEst_Intercept),
CoefEst_irr_est = c(CoefEst_irr_est),
CoefEst_temp = c(CoefEst_temp),
CoefEst_numPM1 = c(CoefEst_numPM1),
CoefEst_massaPM1 = c(CoefEst_massaPM1),
CoefEst_numPM2 = c(CoefEst_numPM2),
CoefEst_massaPM2 = c(CoefEst_massaPM2),
CoefStdError_Intercept = c(CoefStdError_Intercept),
CoefStdError_irr_est = c(CoefStdError_irr_est),
CoefStdError_temp = c(CoefStdError_temp),
CoefStdError_numPM1 = c(CoefStdError_numPM1),
CoefStdError_massaPM1 = c(CoefStdError_massaPM1),
CoefStdError_numPM2 = c(CoefStdError_numPM2),
CoefStdError_massaPM2 = c(CoefStdError_massaPM2),
CoefPValue_Intercept = c(CoefPValue_Intercept),
CoefPValue_irr_est = c(CoefPValue_irr_est),
CoefPValue_temp = c(CoefPValue_temp),
CoefPValue_numPM1 = c(CoefPValue_numPM1),
CoefPValue_massaPM1 = c(CoefPValue_massaPM1),
CoefPValue_numPM2 = c(CoefPValue_numPM2),
CoefPValue_massaPM2 = c(CoefPValue_massaPM2)
)
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
salvarArq_name <- paste(reglinear_caminho, "reg_linear", aux_dia[j], "_", aux_dia[k], ".csv", sep = "")
reglinear_caminho <- "D:/github/Tabelas_DynamoDB/csv/teste_lm/reg_linear/"
salvarArq_name <- paste(reglinear_caminho, "reg_linear", aux_dia[j], "_", aux_dia[k], ".csv", sep = "")
j = 1
k = 10
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
stat.coef
CoefEst_vento_dir
stat.coef[9,1]
summary(reg_linear)$coefficients
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
stat.coef
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
stat.coef
stat.coef
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
j = 79
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
names[78]
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
k = 70
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
aux_dia[i]
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
aux_dia[i]
source('D:/github/Tabelas_DynamoDB/RProject/scripts/a_main.R')
source("D:/github/Tabelas_DynamoDB/RProject/scripts/caminhos.R")
source("D:/github/Tabelas_DynamoDB/RProject/scripts/merge.R")
source("D:/github/Tabelas_DynamoDB/RProject/scripts/group_1hr.R")
source("C:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R")
source("D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R")
aux_dia
aux_dia[i]
source('D:/github/Tabelas_DynamoDB/RProject/scripts/group_1hr.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/group_1hr.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/group_1hr.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/a_main.R')
aux_dia
stat.coef
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/a_main.R')
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
CoefEst_rainfall <- stat.coef[10,1]
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
z
summary(reg_linear)
df
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
View(df)
z <- cor(df[, 3:23])
z <- cor(df[, 3:6])
z
z <- cor(df[, 3:10])
z
z <- cor(df[, 3:15])
z <- cor(df[, 3:14])
z
z <- cor(df[, 3:14, 18:23])
df_cor <- data.frame(df)
df_cor$massaPM4 <- NULL
df_cor
df_cor$numPM4 <- NULL
df_cor$massaPM10 <- NULL
df_cor$numPM10 <- NULL
z <- cor(df_cor[, 3:19])
df_cor
z <- cor(df_cor[, 3:18])
z
z1 <- cor(df_cor[, 3:4])
z1
source('D:/github/Tabelas_DynamoDB/RProject/scripts/regressao_linear.R')
salvarArq_name2 <- paste(reglinear_caminho, "corr(", j, "-", k, ")_", aux_dia[j], "_", aux_dia[k], ".csv", sep = "")
write_csv(z, salvarArq_name2)
z.data.frame <- cor(df_cor[, 3:18])
write_csv(z.data.frame, salvarArq_name2)
z <- cor(df_cor[, 3:18])
z1 <- cor(df_cor[, 3:4])
}
salvarArq_name <- paste(reglinear_caminho, "reg_linear(", j, "-", k, ")_", aux_dia[j], "_", aux_dia[k], ".csv", sep = "")
salvarArq_name2 <- paste(reglinear_caminho, "corr(", j, "-", k, ")_", aux_dia[j], "_", aux_dia[k], ".csv", sep = "")
write_csv(RL_final, salvarArq_name)
write_csv(z, salvarArq_name2)
z <- data.frame(cor(df_cor[, 3:18]))
z1 <- cor(df_cor[, 3:4])
}
salvarArq_name <- paste(reglinear_caminho, "reg_linear(", j, "-", k, ")_", aux_dia[j], "_", aux_dia[k], ".csv", sep = "")
salvarArq_name2 <- paste(reglinear_caminho, "corr(", j, "-", k, ")_", aux_dia[j], "_", aux_dia[k], ".csv", sep = "")
write_csv(RL_final, salvarArq_name)
write_csv(z, salvarArq_name2)
csvPath <- setwd("D:\\github\\Tabelas_DynamoDB\\ambientais_diario_min\\")
# leitura dos arquivos pra regressaoLinear
csvPath <- setwd(pathGroup)
names <- list.files(pattern = "*.csv")
csvPath
names
source('D:/github/Tabelas_DynamoDB/RProject/scripts/b_caminhos.R')
names
nameRegLin
filesRegLin
# leitura dos arquivos pra o script de dust_deposition
pathDustDep <- setwd(est_caminho)
pathDustDep <- setwd(est_caminho)
nameDustDep <- list.files(pattern = "*.csv")
filesRegLin <- paste(pathDustDep, "/", nameDustDep, sep = "")
filesDustDep <- paste(pathDustDep, "/", nameDustDep, sep = "")
filesDustDep
df <- setNames(data.frame(matrix(ncol = 8, nrow = 1)),
c("dia", "Vd1", "Pd", "Nloss",
"Vd2", "m", "x_gauss", "SR" ))
test <- setNames(data.frame(matrix(ncol = 4, nrow = 1)),
c("DVr1", "IDV1", "DVr2" , "IDV2"))
auxVento <- 0
auxVentoMedia <- 0
auxMassa <- 0
auxMassaMedia <- 0
auxConcentracao <- 0
auxConcentracaMedia <- 0
UAux <- 0
RaAux <- 0
RbAux <- 0
VsAux <- 0
VdAux <- 0
i = 1
x <- readr::read_csv(nameDustDep[i], col_types = cols(hora_minuto = col_character()))
x
# Temperatura media em °C
Temp_Media = round(mean(x$temp), digits = 5)
# Direcao do Vento http://tornado.sfsu.edu/geosciences/classes/m430/Wind/WindDirection.html
# https://www.wxforum.net/index.php?topic=8660.0
C_zonal_U      = round( -x$vento_vel * sind(x$vento_dir) , 6)
C_meridional_V = round( -x$vento_vel * cosd(x$vento_dir) , 6)
# atan(1)*180/pi  #  atan(1) = 45° = 0.78539816 rad
#DVr = round( atan2 (   (sum(C_zonal_U))  , (sum(C_meridional_V))  )  *180/pi , 6 )
DVr1 = round( atan (sum(C_zonal_U) / sum(C_meridional_V))  , 6 )
DVr2 = round( atan2 (sum(C_zonal_U) , sum(C_meridional_V)) , 6 )
